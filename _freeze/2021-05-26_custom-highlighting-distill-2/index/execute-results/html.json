{
  "hash": "678c8ec7aa5e076c668072715cd2bcf1",
  "result": {
    "markdown": "---\ntitle: \"Custom Syntax Highlighting for {distill} Part 2\"\nsubtitle: \"Creating the Palette\"\ndescription: |\n  How to create an appealing and accessible colour palette for a syntax highlighting scheme\ndate: 2021-05-26\nauthor: \n  - name: Ella Kaye\n    url: https://twitter.com/ellamkaye\nsite-url: https://ellakaye.rbind.io/\nimage: ek-syntax-highlighting-palette.png\nimage-alt: |\n  A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white.\ncategories:\n  - distill\n  - colour\n  - accessibility\n  - R\ntwitter-card: \n# uncomment lines below for different title and description to post\n#  title: |\n#  description: |\n# uncomment for different image to post\n  image: ek-syntax-highlighting-palette.png\n  image-alt: |\n    A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white.\n#  defaults to 500 x 500 summary: uncomment lines below for large card\n  image-width: 600 \n  image-height: 314\n  card-style: \"summary_large_image\" \nbibliography: bibliography.bib\ndraft: false\n---\n\n::: {.cell}\n\n:::\n\n\n:::{.callout-note collapse=\"false\" .top-callout}\n## Update: August 2022\n\nSince this post was originally written, I have replaced my {disill} website with this one built with [Quarto](https://quarto.org). \n\nThe highlighting you'll see below is not quite the same as it appeared on my previous site, because the default `arrow` theme is implemented differently in {distill} and Quarto.^[If you'd like to see the original theme in action, you can see it over at the [distillery](https://distillery.rbind.io/posts/2021-05-26-custom-syntax-highlighting-for-distill-part-2-creating-the-palette/).] Moreover, I'm now using a very pale gray rather than white background, which necessitated a small shift in the green to achieve a sufficient colour contrast. And if you're reading this in dark mode, it's a whole different scheme again, though built on the same principles as described below.  \n\nI am keeping this post otherwise as was on the blog for posterity. Most of the content holds, regardless of how the site was built.\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## Part 1 recap and Part 2 overview\nIn Part 1 of this series, [custom syntax highlighting for {distill}: modifying the theme](https://ellakaye.rbind.io/posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/), I describe how and why I went about the process of finding and modifying the default syntax highlighting for [{distill}]((https://rstudio.github.io/distill/)) and how I created a function that wrapped that process for [{distilltools}](https://ellakaye.github.io/distilltools). I discuss the default syntax highlighting theme used on {distill} sites, and how we can modify it by replacing the five colours used there with five colours of our choosing.\n\nI also outline the four criteria that were important to me as I went about choosing colours for my own syntax highlighting theme:\n\n- It be based on the <span style=\"color:#D4006A\">pink</span> that I use in my logo and elsewhere throughout this site\n- It uses colour theory to pick colours that look appealing together\n- It meets [WCAG web accessibility guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/), by ensuring sufficient colour contrast, i.e. a ratio of 4.5:1, between each of the colours in the theme and this site's background colour (white)\n- The colours in the palette are colourblind-friendly, i.e. still distinguishable to people with various difference types of colourblindness.\n\nThis post spins out from Part 1 with a brief primer on colour theory and then a deep-dive into the processes, both thought and practical, of choosing colours for my palette that meet the above criteria. I show how I first went about this to derive the palette that's implemented throughout this site. I also demonstrate a different, entirely R-based, approach to satisfying the criteria, which I decided to try out after learning more about different colour spaces as I was writing up this post. I much preferred the outcome of one approach to the other, but your mileage may vary.\n\n## A brief primer on colour theory\n\n### Colour harmonies\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An HSL colour wheel. Screen shot from [https://www.canva.com/colors/color-wheel/](https://www.canva.com/colors/color-wheel/), annotations adapted from [https://dev.to/rneha725/hsl-and-hsla-in-css-31j3](https://dev.to/rneha725/hsl-and-hsla-in-css-31j3).](hsl-colour-wheel-d4006a-annotated.png){#fig-hsl-colour-wheel fig-alt='A circle filled with hues of red at the top (0 degrees), moving smoothly through orange, yellow (60 degrees), green (120 degrees), cyan (180 degrees), blue (240 degrees) and magenta(300 degrees) as you rotate clockwise round the circle. The colours are more saturated towards the edge of the circle and greyer towards the centre.' width=375}\n:::\n:::\n\n\nColour theory determines which colours 'look good' together, based on their relative position on a colour wheel, such as that in @fig-hsl-colour-wheel, somewhat analogously, I think, to how certain musical intervals sound more pleasing/harmonious than others, depending on the ratio of their frequencies. As shown in @fig-colour-harmonies, there are various different types of colour palettes that are in colour harmony, such as complementary (comprised of colours opposite each other on the wheel), analogous (three colours side by side) and triadic (three colours evenly spaced around the wheel). Note that all the colour schemes are derived from the same twelve colours, spaced evenly around a circle. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Harmonious colour combinations. Figure from [https://www.widewalls.ch/magazine/color-theory-basics-elements-color-wheel](https://www.widewalls.ch/magazine/color-theory-basics-elements-color-wheel).](colour-harmonies.jpg){#fig-colour-harmonies fig-alt='Six wheels each split into 12 equal segments of different colours, equally spaced round the colour wheel. Each wheel highlights two, three or four of these colours that look harmonious together.'}\n:::\n:::\n\n\n### Colour spaces\n\n#### RGB, HSB and HSL\n\nAnother aspect of colour theory relates to colour spaces, and different ways that colours can be defined. The best known, at least in the context of designing for the web, is RGB (**R**ed **G**reen **B**lue), which defines a colour by how much of each of those three primary colours it contains, in a range of 0-255. It is the hexidecimal representations of these three numbers that combine to make up the hex code for a colour.\n\nMore intuitive, however, for adjusting colours, is defining them by HSB (**H**ue, **S**aturation, **B**rightness), also known as HSV (**H**ue, **S**aturation, **V**alue). HSB is a simple transformation of the RGB space. Similar to HSB is HSL (**H**ue, **S**aturation, **L**ightness), though HSL is considered an improved over HSB in terms of its perceptual qualities.\n\nIn HSB, the hue represents the colour type and is a number measured between 0 and 360Â°; it's where you are on the colour wheel, ignoring how bright or intense the colour is. Saturation describes the intensity or richness of the hue, measured between 0 and 100%. 100% is the richest version of the colour and 0% is a shade of grey. Brightness measures, you guessed it, the brightness of the colour. Again, it ranges from 0 to 100%, with 0% being black and 100% being a very bright colour (here, black is not the opposite of white). Here's an [excellent article on the HSB system](https://learnui.design/blog/the-hsb-color-system-practicioners-primer.html), which also explains how it differs from HSL. The differences between HSB and HSL are also illustrated in @fig-hsl-hsb-sliders.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![HSL and HSB sliders for the pink used throughout this site. Image is a screenshot from [http://colorizer.org](http://colorizer.org).](hsl-hsb-sliders.png){#fig-hsl-hsb-sliders fig-alt='Two sets of three colour sliders, one for HSL the other for HSB. Both have the same scale for hue. In HSL, the saturation runs from grey to bright pink. In HSB with saturation runs from white to bright pink. In HSL, the lightness runs from black to white, via the bright pink. In HSB, the Brightness runs from black to bright pink.' width=1200}\n:::\n:::\n\n\nIt's great to play around with an HSL or HSB colour wheel to get a sense of how harmonious colour schemes are built, and how the colours in them relate to each other on the wheel. I really like the [canva colour wheel](https://www.canva.com/colors/color-wheel/). It's pretty simple, with only a few schemes, but it's nicely designed and easy to use, and the page explains the basics of colour theory too. It's a fun way to start building a palette. I like how you can pull the dots around the wheel and see how the colours relate, and if you click on a colour in the palette, there are HSL sliders too. Plus, as you move colours around, the background of the page changes colour, which is a nice touch! \n\n#### HCL\n\nWhilst websites on colour theory for designers tend to focus on either the HSB or HSL spaces, and it's HSB or HSL wheels/sliders that tend to be built into design and colour software and apps, both spaces suffer from a lack of perceptual uniformity. The RGB rainbow palette is [notorious](https://colorspace.r-forge.r-project.org/articles/endrainbow.html) for this. In general, RBG/HSB/HSL palettes are not a good choice for statistical graphics and data visualisation, where colour conveys meaning. For these purposes, the HCL colour space (**H**ue, **C**hroma, **L**uminance) offers a much better alternative. It is much more suitable for capturing human colour perception. \n\nThere is an R package for working with the HCL colour space, the intuitively named [{colorspace}](https://colorspace.r-forge.r-project.org/articles/colorspace.html) [@Zeileis:2020]. It has many excellent vignettes, including one about the [HCL space](https://colorspace.r-forge.r-project.org/articles/color_spaces.html) and its perceptual superiority over other colour spaces. The package also provides [colour palettes](https://colorspace.r-forge.r-project.org/articles/hcl_palettes.html) and [scales for {ggplot2}](https://colorspace.r-forge.r-project.org/articles/ggplot2_color_scales.html). There is also support for [HCL palettes in base R](https://developer.r-project.org/Blog/public/2019/04/01/hcl-based-color-palettes-in-grdevices/). The HCL space is also used on [I want hue](http://medialab.github.io/iwanthue/), a site about colours aimed at data scientists, which allows you to generate and refine palettes of optimally distinct colours.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![My pink on the Luminance-Chroma plane in the HCL space. Image is a screenshot from [http://hclwizard.org](http://hclwizard.org:3000/hclcolorpicker/).](pink-in-HCL.png){#fig-pink-in-hcl fig-alt='A triangle of HCL space, with bright pink on the far right, transitioning towards light grey on the top left corner and black on the bottom left corner.' width=785}\n:::\n:::\n\n\nI haven't seen the HCL space used elsewhere, at least not in the myriad of sites on colour theory for designers or colour/design apps than I use or have read when preparing my theme and this post. Perceptual uniformity is arguably more important in choosing colour palettes for data visualisation, where the colour conveys information about the data, than in picking a few colours that look good together for a syntax highlighting scheme. \n\n## Approach 1: ColorSlurp and HSB\n\n### Building a palette based on my <span style=\"color:#D4006A\">pink</span>, using colour theory\n\nAs I discuss in Part 1 of this series, I know that I need a palette of five colours to replace the five colours used in the default syntax highlighting scheme that comes with {distill}. The problem with all the colour schemes defined in @fig-colour-harmonies is that they use a maximum of four colours. But not to worry! We know from colour theory that we can find 12 colours in harmony by taking evenly spaced colours around the HSL or HSB wheel, i.e. colours whose hues are 30Â° apart, given fixed values for saturation and brightness/lightness. Since we only need five colours, it's sufficient to find the six colours that are 60Â° apart, and ignore one of them. Note that for five colours to appear harmonious, we have to respect these angles, not choose five colours that are 72Â° apart.\n\nThe main pink that I use in this site has hex `<span style=\"background-color: #D4006A; color: white; padding:3px\">#D4006A</span>`{=html}. I use a great little Mac app called [ColorSlurp](https://colorslurp.com) for building and assessing colour palettes. The basic version is free, though the pro version has great features for testing accessibility - more on that below. In ColorSlurp, I started a new palette with #D4006A as a starting point, then, making sure I was in HSB mode, found its HSB values are 330Â°, 100%, 83%. Leaving the S and B sliders where they are, the next colour I needed is 60Â° around the circle, i.e. at 30Â°, so I moved the H slider to that value and added the resulting orange to the palette. I then repeated that for 90Â°, 150Â°, 210Â° and 270Â°, giving me two shades of green, a blue and a purple. With a colour selected in ColorSlurp, you can also pull up the colour harmonies tab, `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 512 512\" style=\"height:1em;width:1em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M512 255.1C512 256.9 511.1 257.8 511.1 258.7C511.6 295.2 478.4 319.1 441.9 319.1H344C317.5 319.1 296 341.5 296 368C296 371.4 296.4 374.7 297 377.9C299.2 388.1 303.5 397.1 307.9 407.8C313.9 421.6 320 435.3 320 449.8C320 481.7 298.4 510.5 266.6 511.8C263.1 511.9 259.5 512 256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256V255.1zM96 255.1C78.33 255.1 64 270.3 64 287.1C64 305.7 78.33 319.1 96 319.1C113.7 319.1 128 305.7 128 287.1C128 270.3 113.7 255.1 96 255.1zM128 191.1C145.7 191.1 160 177.7 160 159.1C160 142.3 145.7 127.1 128 127.1C110.3 127.1 96 142.3 96 159.1C96 177.7 110.3 191.1 128 191.1zM256 63.1C238.3 63.1 224 78.33 224 95.1C224 113.7 238.3 127.1 256 127.1C273.7 127.1 288 113.7 288 95.1C288 78.33 273.7 63.1 256 63.1zM384 191.1C401.7 191.1 416 177.7 416 159.1C416 142.3 401.7 127.1 384 127.1C366.3 127.1 352 142.3 352 159.1C352 177.7 366.3 191.1 384 191.1z\"/></svg>`{=html}, which gives quick access to some of these colours. As I only need five colours, I discarded one of the greens, keeping the one at 150Â°, which is complementary to the starting pink. \n\nIf you don't use ColorSlurp or a similar app, there are many online options for building a palette in this way, for example [http://colorizer.org](http://colorizer.org) (add a new color to the palette by clicking on the next square down to the right of the sliders). In both ColorSlurp and on colorizer.org, once you have defined a colour by its HSB values, you can read off the hex code, for ease of use in R. \n\nAt the end of this stage of the process, based purely on my pink and colour theory, my syntax highlighting palette now stood as in @fig-colour-theory-palette. In the HSB space, these colours all have a saturation of 100% and a brightness of 83%.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Colours for syntax highlighting, starting from my main pink, based only on colour theory.](index_files/figure-html/fig-colour-theory-palette-1.png){#fig-colour-theory-palette fig-alt='A swatch of five colours, very bright and vibrant shades of pink, orange, green, blue and purple.' width=624}\n:::\n:::\n\n\n\n### Adapting for web accessibility\n\nAs noted in [Part 1](https://ellakaye.rbind.io/posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/) of this series, one key feature of the default syntax highlighting scheme for {distill} is that it is optimised for accessibility and colour contrast. According to the [Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/), at the WCAG AA (minimum contrast) level, this requires that that contrast ratio between text and background colours be at least 4.5:1 for text of 14pt+ (which is the default text size for code in {distill}). The more stringent WCAG AAA (enhanced) level requires a ratio of at least 7:1.\n\nThe pro version of ColorSlurp includes a contrast checker, as in @fig-colorslurp-contrast, though there are many websites that also offer this. WebAIM (Web with Accessibility in Mind) has a very handy [contrast checker](https://webaim.org/resources/contrastchecker/) which, like ColorSlurp, also includes sliders for adjusting the colours until the desired contrast is reached. Darkening a colour to improve contrast keeps the hue and saturation the same but reduces the brightness or lightness component (ColorSlurp uses HSB, WebAIM uses HSL).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Contrast checking in ColorSlurp](contrast-check.png){#fig-colorslurp-contrast fig-alt='Comparing my pink and white in the ColorSlurp app shows a contrast of 5.24 for text 14pt+, passing the WCAG AA standard. Sliders below show that the colour can be adjusted.' width=598}\n:::\n:::\n\n\nThe `<span style=\"background-color: #D4006A; color: white; padding:3px\">pink</span>`{=html}, `<span style=\"background-color: #006AD4; color: white; padding:3px\">blue</span>`{=html} and `<span style=\"background-color: #6A00D4; color: white; padding:3px\">purple</span>`{=html} in the palette created above have a contrast ratio of better than 4.5:1 with the pure white background, but the `<span style=\"background-color: #D46A00; color: black; padding:3px\">orange</span>`{=html} and `<span style=\"background-color: #00D46A; color: black; padding:3px\">green</span>`{=html} do not.\n\nMy first thought was to keep the pink, blue and purple the same, and to just reduce the brightness of the orange and green until the contrast ratio was a bit better than required. In the HSB space, that gives the palette in @fig-orange-green-less-bright. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Reducing brightness in just the orange and green to achieve desired contrasts.](index_files/figure-html/fig-orange-green-less-bright-1.png){#fig-orange-green-less-bright fig-alt='A swatch of five colours, very bright and vibrant shades of pink, blue and purple, with less-bright shades of orange and green.' width=624}\n:::\n:::\n\n\n\nIt's not bad, but when I applied that palette as a syntax highlighting scheme, to my eye the pink, blue and purple looked a little too bright relative to the orange.\n\nMy next thought was to reduce the brightness on all the colours to the level of the least bright colour that passes the accessibility check (the green, at 53%). That gives the palette in @fig-all-less-bright.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Reducing brightness in all colours to the level of the green.](index_files/figure-html/fig-all-less-bright-1.png){#fig-all-less-bright fig-alt='A swatch of five colours, less bright versions of all five colours in the original palette.' width=624}\n:::\n:::\n\n\n\nThat looks way too dark for my liking. I don't think it's vibrant enough, and, although the colours all have good contrast against the white background, they don't have much contrast with each other.\n\nSo, I settled on a compromise position. I reduced the brightness of the original pink, blue and purple from 83% to match the brightness of the accessibility-passing orange (71%), leaving only the green at a brightness of 53%, which it needs to pass the contrast check. This gives the palette in @fig-final-palette. To my eye, the green doesn't appear considerably more dark/less bright than the other four colours. If anything, the greens in @fig-colour-theory-palette and @fig-all-less-bright which both have uniform brighness, look a little too bright compared to the other colours. I guess this is a result of the lack of perceptual uniformity of the HSB space. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![The palette I settled on for my syntax highlighting scheme.](index_files/figure-html/fig-final-palette-1.png){#fig-final-palette fig-alt='A swatch of five colours, a pink, orange, green, blue and purple, all quite bright, but still all with a contrast ratio of 4.5:1 or better against white.' width=624}\n:::\n:::\n\n\n\nI'm happy with that, and that's the syntax highlighting scheme I've adopted throughout this site, despite the fact that the palette now doesn't actually include the pink that I set out to build my scheme around! However, because of the process I've followed, the pink that is in the palette does tone well with the brighter pink and I think my site still has a consistent look. In the end, it was more important that all the colours in the palette looked consistent together and met accessibility guidelines. \n\nI am only just beginning to learn about web accessibility, and I know my site does not yet meet all best practices, but I'm committed to improving in this area. I first became aware of the issue of web accessibility because I follow [Silvia CanelÃ³n on twitter](https://twitter.com/spcanelon) and I highly recommend you do the same! The [a11y project](https://www.a11yproject.com) and [WebAIM](https://webaim.org) are great places to learn more. \n\n### Checking for colourblindness\n\nSome visual impairments require a high colour contrast between text and background colour in order to be able to read content on the web. Another class of visual impairment worth paying attention to when designing palettes is that of colour blindness. \n\n[Nick Tierney](https://www.njtierney.com) has some excellent resources about colour and colourblindness and R packages for accessing these. [These comprehensive slides](https://njt-monash-colour.netlify.app/#1) cover what colour is and how we perceive it, colourblindness, how to check how palettes/plots appear to those with different types of colourblindness, the HCL space, the {colorspace} package and how to create your own palettes. He also has a [short blog post](https://www.njtierney.com/post/2020/10/15/assess-colour/) on quickly assessing colour palettes to ensure they're colourblind-friendly.\n\nAs recommended in the above posts, I used the [{prismatic}](https://emilhvitfeldt.github.io/prismatic/) package by [Emil Hvitfeldt](https://www.hvitfeldt.me) to check how my syntax highlighting palette appears to those with different types of colourblindness:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(prismatic)\nek_highlight_colours <- c(\"#5B00B6\", \"#005BB6\", \"#008643\", \"#B65B00\", \"#B6005B\")\ncheck_color_blindness(ek_highlight_colours)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Checking my palette for how it appears to those with various types of colourblindness.](check-colourblindness.png){#fig-check-colourblindness fig-alt='Four colour palettes. One shows my pink/orange/green/blue/purple palette as is, the other three show how that palette appears to those with deuteranopia, protanopia and tritanopia. Under all those conditions, the five colours are distinguishable.' width=647}\n:::\n:::\n\n\nThankfully, for all three main types of colourblindess, the five colours in the palette are distinguishable, so no further adjustments are necessary.\n\n## Approach 2: An R-based HCL alternative\n\nThe above sections describe the processes, both thought and practical, that I went through to derive the colour palette for my syntax highlighting scheme, and I'm happy with what I came up with. As I was deriving my scheme, I was working in ColorSlurp and only had a cursory knowledge of the differences between the HSB, HSL and HCL colour spaces.\n\nHowever, as I was writing up this blog post, I become increasingly curious about alternative approaches I might have taken. In particular, could I have come up with a scheme that met my criteria entirely in R? Given the incredible ecosystem that R is, it should be no surprise that the answer turned out to be yes! So, below is this alternative approach, using the [{colorspace}](https://colorspace.r-forge.r-project.org), [{coloratio}](https://matt-dray.github.io/coloratio/) and [{prismatic}](https://emilhvitfeldt.github.io/prismatic/) packages. Also, whereas the previous approach is based on the HSB colour space, this one uses HCL.\n\n### Building a palette based on my <span style=\"color:#D4006A\">pink</span>, using colour theory\n\nThe {colorspace} package uses the HCL color space, so the first task was to convert a hex code into its hue, chroma and luminance components, and make them available for future use, which can be done as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(colorspace)\npink <- hex2RGB(\"#D4006A\", gamma = FALSE)\npink_hcl <- as(pink, \"polarLUV\")\n\npink_h <- pink_hcl@coords[1, \"H\"]\npink_c <- pink_hcl@coords[1, \"C\"]\npink_l <- pink_hcl@coords[1, \"L\"]\n```\n:::\n\n\nThe function from {colorspace} that is going to do the hard work of building a palette with differing hues but constant chroma and luminance (or as close as it can in HCL space) is [`qualitative_hcl()`](https://colorspace.r-forge.r-project.org/reference/hcl_palettes.html). By default, you give it the number of colours you want, and it works out equally spaced hues, starting at 0Â°. To override this default, you can give the `h` argument a start and end value, `c(start, end)`. Again, I'm going to choose six colours, 60Â° apart, and discard one of them.^[Again, I want to stress that this 60Â° apart approach and discard one is NOT something you should do when building a five-colour palette for a data visualisation. There, where the colours mean something in relation to the data, it's important that the hues are evenly spaced. Even for qualitative data, the perceptual uniformity of five evenly-spaced colours is preferable. However, for a syntax highlighting scheme, where any of the colours can appear next to any of the others, and we want all pairs to look good together, and the colours convey no meaning, based on my current and still somewhat limited knowledge of colour theory, I think the six-at-sixty-degrees-discard-one approach is preferable (though I could probably be persuaded otherwise if anyone has a compelling case for an evenly-spaced 5 colours in this context too).] The `start` value should be in [0, 60) and the end value should be in [300, 360). Let the hue of our starting pink be `pink_h`. Then all the colours in the palette are going to have a hue `pink_h + 60 * k`  for some integer k. The following code picks the start and end values we need to pass to `h`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq_60 <- seq(from = -300, to = 300, by = 60)\npink_60 <- seq_60 + pink_h\n\npink_h_lower <- pink_60[which((pink_60 >= 0 & pink_60 < 60))]\npink_h_upper <- pink_60[which((pink_60 >= 300 & pink_60 < 360))]\n```\n:::\n\n\nThat's most of the hard work. Now we build the palette:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhcl_six <- qualitative_hcl(\n  6, \n  h = c(pink_h_lower, pink_h_upper), \n  c = pink_c, \n  l = pink_l\n) \n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Six colours, with hues approximately 60Â° apart and roughly equal luminance, based around my pink.](index_files/figure-html/fig-hcl-six-1.png){#fig-hcl-six fig-alt='A swatch of six colours in the HCL space, a brown, two greens, a blue, magenta, and my pink.' width=624}\n:::\n:::\n\n\nThe only personal decision I make in this section is which of these six colours to discard. Removing the first of the greens gives me the palette in @fig-hcl-five.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![As in the previous figure but minus a green and rearranged.](index_files/figure-html/fig-hcl-five-1.png){#fig-hcl-five fig-alt='A swatch of five colours in the HCL space, my pink, a brown, green, blue and magenta.' width=624}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n:::{.callout-note collapse=\"false\"}\n## Update: May 27th 2021\n\nSince publishing this post, Achim Zeileis, the author of the {colorspace} package, got in touch with me on [twitter](https://twitter.com/AchimZeileis/status/1397580619857682437) to offer a bit more insight into what's going on with this palette. The `hcl_six` palette does not, as I originally stated, have constant chroma. I have corrected the text above. Not all combinations of Hue/Chroma/Luminance exist in HCL space. At the luminance of my pink (~46) not many other hues can have such high chroma (~118), as demonstrated in @fig-hclplot. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Hues and Chromas in HCL space at the Luminance of my pink](index_files/figure-html/fig-hclplot-1.png){#fig-hclplot fig-alt='A partially filled colour wheel for a luminance of 47 in HCL space, showing hues of orange, red and purple with high chroma, but with no greens or yellows of high chroma.' width=672}\n:::\n:::\n\n\n`qualitative_hcl()` struggles in such circumstances, though does try to keep the luminance of the palette constant.\n:::\n\n### Adapting for web accessibility\n\nWhen I was developing my scheme, I used my trusted ColorSlurp app to adjust colours to ensure they met WCAG standards of web accessibility. In writing up this post, I since learnt about web resources to do the same (e.g. [WebAIM contrast checker](https://webaim.org/resources/contrastchecker/)) and now, for this section, I've discovered the [{coloratio}](https://github.com/matt-dray/coloratio) by [Matt Dray](https://www.matt-dray.com) and [{savonliquide}](https://github.com/feddelegrand7/savonliquide) by [Mohamed El Fodil Ihaddaden](https://ihaddadenfodil.com) packages that can do this in R.\n\nBoth packages have much to recommend them. {savonliquide} has the advantage of being on CRAN, and provides a toolbox that allows the user to implement accessibility-related concepts, including, but not limited to, contrast checking. {coloratio} is GitHub only, and only for contrast checking, but it has some additional functionality in that area above {savonliquide}, such as quick plotting of the colours in contrast, and a function, `cr_choose_bw()` that chooses which of black or white has the better contrast ratio with a user supplied colour (which, incidentally, I use to automatically choose the text colour when highlighting words with different background colours, e.g. `<span style=\"background-color: #D4006A; color: white; padding:3px\">#D4006A</span>`{=html} vs `<span style=\"background-color: #00D46A; color: black; padding:3px\">#00D46A</span>`{=html}).^[Since switching my website to Quarto, I have found out about the [`best_contrast`](https://emilhvitfeldt.github.io/prismatic/reference/best_contrast.html) function from {prismatic} that I will use instead of `cr_choose_bw` in future, since it allows us to specify the colours to contrast against, useful for me now that I am using very dark gray and very pale gray instead of black and white.]\n\nBelow, I use the `cr_get_ratio` function from `coloratio` to check the colour contrasts of each colour in the palette. Because it's not vectorised, I use this in conjunction with `map2_dbl` from [{purrr}](https://purrr.tidyverse.org) to get all the contrasts at once.\n\nIf any of the contrasts are less than 4.5, I then call on the `darken()` function from {colorspace}, which adjusts each colour in the palette to make it, you guessed it, a bit darker, therefore improving the contrast ratio. I loop over these checking and darkening iterations until all colours in the palette have a contrast ratio of at least 4.5:1 compared to white. Here is the code that achieves this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(coloratio)\nlibrary(purrr)\n\npalette <- hcl_six[c(6, 1, 3:5)]\ncontrasts <- map2_dbl(\n    palette, \n    \"white\", \n    ~cr_get_ratio(.x, .y, quiet = TRUE)\n  )\nmin_contrast <- 4.5\nany_too_light <- any(contrasts < min_contrast)\n\nwhile (any_too_light) {\n  palette <- darken(palette, amount = 0.05)\n  contrasts <- map2_dbl(\n      palette, \n      \"white\", \n      ~cr_get_ratio(.x, .y, quiet = TRUE)\n    )\n  any_too_light <- any(contrasts < min_contrast)\n}\n```\n:::\n\n\nAt the end of the process, the palette looks like this:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![An HCL palette where all colours have a contrast ratio of 4.5:1 or better against white.](index_files/figure-html/fig-hcl-darkened-1.png){#fig-hcl-darkened fig-alt='A swatch of five colours, pink, brown, green, blue, magenta, all slightly darker than in the previous figure.' width=624}\n:::\n:::\n\n\n\n### Checking for colourblindness\n\nAs before, we use {prismatic} to check how the palette appears to those with various types of colourblindess. Whilst R can help us visualise this, we still need to use our judgement as to whether the output is acceptable. I believe, in @fig-hcl-darkened-colourblind, it is.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Checking how the darkened HCL palette appears to those with various types of colourblindness.](hcl-darkened-colourblind.png){#fig-hcl-darkened-colourblind fig-alt='Four colour palettes. One shows the darkened HCL palette from the previous post as is, the other three show how that palette appears to those with deuteranopia, protanopia and tritanopia. Under all those conditions, the five colours are distinguishable.' width=647}\n:::\n:::\n\n\n### But, do I like it?\n\nGoing through the process of building a colour palette that meets my criteria purely in R, in as automated, reproducible and adaptable way as possible has been a great learning experience for me, and hopefully something that will be useful to others. I don't much like the palette it produced, though, especially in comparison to the one I came up with previously. Although the HCL-based palette probably has slightly better theoretical perceptual qualities, I prefer the vibrancy of the colours in the palette I came up with using my first approach, and that's the one I've adopted on this site. \n\n## Back to Part 1\n\nNow that I have chosen my colour palette, head back to [Part 1](https://ellakaye.rbind.io/posts/2021-05-25-custom-syntax-highlighting-for-distill-part-1-modifying-the-default-theme/) for details of how to modify the default {distill} syntax highlighting theme to incorporate them, and how to apply the custom theme to a {distill} site.\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}